// Code generated by MockGen. DO NOT EDIT.
// Source: service_api/repository/interface/demand_history_repository_interface.go

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	domain "github.com/ryvasa/go-super-farmer/service_api/model/domain"
)

// MockDemandHistoryRepository is a mock of DemandHistoryRepository interface.
type MockDemandHistoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDemandHistoryRepositoryMockRecorder
}

// MockDemandHistoryRepositoryMockRecorder is the mock recorder for MockDemandHistoryRepository.
type MockDemandHistoryRepositoryMockRecorder struct {
	mock *MockDemandHistoryRepository
}

// NewMockDemandHistoryRepository creates a new mock instance.
func NewMockDemandHistoryRepository(ctrl *gomock.Controller) *MockDemandHistoryRepository {
	mock := &MockDemandHistoryRepository{ctrl: ctrl}
	mock.recorder = &MockDemandHistoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDemandHistoryRepository) EXPECT() *MockDemandHistoryRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDemandHistoryRepository) Create(ctx context.Context, supply *domain.DemandHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, supply)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDemandHistoryRepositoryMockRecorder) Create(ctx, supply interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDemandHistoryRepository)(nil).Create), ctx, supply)
}

// FindAll mocks base method.
func (m *MockDemandHistoryRepository) FindAll(ctx context.Context) ([]*domain.DemandHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]*domain.DemandHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockDemandHistoryRepositoryMockRecorder) FindAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockDemandHistoryRepository)(nil).FindAll), ctx)
}

// FindByCityID mocks base method.
func (m *MockDemandHistoryRepository) FindByCityID(ctx context.Context, id int64) ([]*domain.DemandHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCityID", ctx, id)
	ret0, _ := ret[0].([]*domain.DemandHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCityID indicates an expected call of FindByCityID.
func (mr *MockDemandHistoryRepositoryMockRecorder) FindByCityID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCityID", reflect.TypeOf((*MockDemandHistoryRepository)(nil).FindByCityID), ctx, id)
}

// FindByCommodityID mocks base method.
func (m *MockDemandHistoryRepository) FindByCommodityID(ctx context.Context, id uuid.UUID) ([]*domain.DemandHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCommodityID", ctx, id)
	ret0, _ := ret[0].([]*domain.DemandHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCommodityID indicates an expected call of FindByCommodityID.
func (mr *MockDemandHistoryRepositoryMockRecorder) FindByCommodityID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCommodityID", reflect.TypeOf((*MockDemandHistoryRepository)(nil).FindByCommodityID), ctx, id)
}

// FindByCommodityIDAndCityID mocks base method.
func (m *MockDemandHistoryRepository) FindByCommodityIDAndCityID(ctx context.Context, commodityID uuid.UUID, cityID int64) ([]*domain.DemandHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCommodityIDAndCityID", ctx, commodityID, cityID)
	ret0, _ := ret[0].([]*domain.DemandHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCommodityIDAndCityID indicates an expected call of FindByCommodityIDAndCityID.
func (mr *MockDemandHistoryRepositoryMockRecorder) FindByCommodityIDAndCityID(ctx, commodityID, cityID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCommodityIDAndCityID", reflect.TypeOf((*MockDemandHistoryRepository)(nil).FindByCommodityIDAndCityID), ctx, commodityID, cityID)
}

// FindByID mocks base method.
func (m *MockDemandHistoryRepository) FindByID(ctx context.Context, id uuid.UUID) (*domain.DemandHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*domain.DemandHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockDemandHistoryRepositoryMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockDemandHistoryRepository)(nil).FindByID), ctx, id)
}
