// Code generated by MockGen. DO NOT EDIT.
// Source: service_api/repository/interface/city_repository_interface.go

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/ryvasa/go-super-farmer/service_api/model/domain"
)

// MockCityRepository is a mock of CityRepository interface.
type MockCityRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCityRepositoryMockRecorder
}

// MockCityRepositoryMockRecorder is the mock recorder for MockCityRepository.
type MockCityRepositoryMockRecorder struct {
	mock *MockCityRepository
}

// NewMockCityRepository creates a new mock instance.
func NewMockCityRepository(ctrl *gomock.Controller) *MockCityRepository {
	mock := &MockCityRepository{ctrl: ctrl}
	mock.recorder = &MockCityRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCityRepository) EXPECT() *MockCityRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCityRepository) Create(ctx context.Context, city *domain.City) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, city)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCityRepositoryMockRecorder) Create(ctx, city interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCityRepository)(nil).Create), ctx, city)
}

// Delete mocks base method.
func (m *MockCityRepository) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCityRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCityRepository)(nil).Delete), ctx, id)
}

// FindAll mocks base method.
func (m *MockCityRepository) FindAll(ctx context.Context) ([]*domain.City, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]*domain.City)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockCityRepositoryMockRecorder) FindAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockCityRepository)(nil).FindAll), ctx)
}

// FindByID mocks base method.
func (m *MockCityRepository) FindByID(ctx context.Context, id int64) (*domain.City, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*domain.City)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockCityRepositoryMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockCityRepository)(nil).FindByID), ctx, id)
}

// Update mocks base method.
func (m *MockCityRepository) Update(ctx context.Context, id int64, city *domain.City) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, city)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCityRepositoryMockRecorder) Update(ctx, id, city interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCityRepository)(nil).Update), ctx, id, city)
}
