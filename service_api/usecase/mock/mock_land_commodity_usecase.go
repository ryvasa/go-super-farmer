// Code generated by MockGen. DO NOT EDIT.
// Source: service_api/usecase/interface/land_commodity_usecase_interface.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	domain "github.com/ryvasa/go-super-farmer/service_api/model/domain"
	dto "github.com/ryvasa/go-super-farmer/service_api/model/dto"
)

// MockLandCommodityUsecase is a mock of LandCommodityUsecase interface.
type MockLandCommodityUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockLandCommodityUsecaseMockRecorder
}

// MockLandCommodityUsecaseMockRecorder is the mock recorder for MockLandCommodityUsecase.
type MockLandCommodityUsecaseMockRecorder struct {
	mock *MockLandCommodityUsecase
}

// NewMockLandCommodityUsecase creates a new mock instance.
func NewMockLandCommodityUsecase(ctrl *gomock.Controller) *MockLandCommodityUsecase {
	mock := &MockLandCommodityUsecase{ctrl: ctrl}
	mock.recorder = &MockLandCommodityUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLandCommodityUsecase) EXPECT() *MockLandCommodityUsecaseMockRecorder {
	return m.recorder
}

// CreateLandCommodity mocks base method.
func (m *MockLandCommodityUsecase) CreateLandCommodity(ctx context.Context, req *dto.LandCommodityCreateDTO) (*domain.LandCommodity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLandCommodity", ctx, req)
	ret0, _ := ret[0].(*domain.LandCommodity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLandCommodity indicates an expected call of CreateLandCommodity.
func (mr *MockLandCommodityUsecaseMockRecorder) CreateLandCommodity(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLandCommodity", reflect.TypeOf((*MockLandCommodityUsecase)(nil).CreateLandCommodity), ctx, req)
}

// DeleteLandCommodity mocks base method.
func (m *MockLandCommodityUsecase) DeleteLandCommodity(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLandCommodity", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLandCommodity indicates an expected call of DeleteLandCommodity.
func (mr *MockLandCommodityUsecaseMockRecorder) DeleteLandCommodity(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLandCommodity", reflect.TypeOf((*MockLandCommodityUsecase)(nil).DeleteLandCommodity), ctx, id)
}

// GetAllLandCommodity mocks base method.
func (m *MockLandCommodityUsecase) GetAllLandCommodity(ctx context.Context) ([]*domain.LandCommodity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllLandCommodity", ctx)
	ret0, _ := ret[0].([]*domain.LandCommodity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllLandCommodity indicates an expected call of GetAllLandCommodity.
func (mr *MockLandCommodityUsecaseMockRecorder) GetAllLandCommodity(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllLandCommodity", reflect.TypeOf((*MockLandCommodityUsecase)(nil).GetAllLandCommodity), ctx)
}

// GetLandArea mocks base method.
func (m *MockLandCommodityUsecase) GetLandArea(ctx context.Context, params *dto.LandAreaParamsDTO) (*dto.LandAreaResponseDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLandArea", ctx, params)
	ret0, _ := ret[0].(*dto.LandAreaResponseDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLandArea indicates an expected call of GetLandArea.
func (mr *MockLandCommodityUsecaseMockRecorder) GetLandArea(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLandArea", reflect.TypeOf((*MockLandCommodityUsecase)(nil).GetLandArea), ctx, params)
}

// GetLandCommodityByCommodityID mocks base method.
func (m *MockLandCommodityUsecase) GetLandCommodityByCommodityID(ctx context.Context, id uuid.UUID) ([]*domain.LandCommodity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLandCommodityByCommodityID", ctx, id)
	ret0, _ := ret[0].([]*domain.LandCommodity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLandCommodityByCommodityID indicates an expected call of GetLandCommodityByCommodityID.
func (mr *MockLandCommodityUsecaseMockRecorder) GetLandCommodityByCommodityID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLandCommodityByCommodityID", reflect.TypeOf((*MockLandCommodityUsecase)(nil).GetLandCommodityByCommodityID), ctx, id)
}

// GetLandCommodityByID mocks base method.
func (m *MockLandCommodityUsecase) GetLandCommodityByID(ctx context.Context, id uuid.UUID) (*domain.LandCommodity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLandCommodityByID", ctx, id)
	ret0, _ := ret[0].(*domain.LandCommodity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLandCommodityByID indicates an expected call of GetLandCommodityByID.
func (mr *MockLandCommodityUsecaseMockRecorder) GetLandCommodityByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLandCommodityByID", reflect.TypeOf((*MockLandCommodityUsecase)(nil).GetLandCommodityByID), ctx, id)
}

// GetLandCommodityByLandID mocks base method.
func (m *MockLandCommodityUsecase) GetLandCommodityByLandID(ctx context.Context, id uuid.UUID) ([]*domain.LandCommodity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLandCommodityByLandID", ctx, id)
	ret0, _ := ret[0].([]*domain.LandCommodity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLandCommodityByLandID indicates an expected call of GetLandCommodityByLandID.
func (mr *MockLandCommodityUsecaseMockRecorder) GetLandCommodityByLandID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLandCommodityByLandID", reflect.TypeOf((*MockLandCommodityUsecase)(nil).GetLandCommodityByLandID), ctx, id)
}

// RestoreLandCommodity mocks base method.
func (m *MockLandCommodityUsecase) RestoreLandCommodity(ctx context.Context, id uuid.UUID) (*domain.LandCommodity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreLandCommodity", ctx, id)
	ret0, _ := ret[0].(*domain.LandCommodity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreLandCommodity indicates an expected call of RestoreLandCommodity.
func (mr *MockLandCommodityUsecaseMockRecorder) RestoreLandCommodity(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreLandCommodity", reflect.TypeOf((*MockLandCommodityUsecase)(nil).RestoreLandCommodity), ctx, id)
}

// UpdateLandCommodity mocks base method.
func (m *MockLandCommodityUsecase) UpdateLandCommodity(ctx context.Context, id uuid.UUID, req *dto.LandCommodityUpdateDTO) (*domain.LandCommodity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLandCommodity", ctx, id, req)
	ret0, _ := ret[0].(*domain.LandCommodity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLandCommodity indicates an expected call of UpdateLandCommodity.
func (mr *MockLandCommodityUsecaseMockRecorder) UpdateLandCommodity(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLandCommodity", reflect.TypeOf((*MockLandCommodityUsecase)(nil).UpdateLandCommodity), ctx, id, req)
}
