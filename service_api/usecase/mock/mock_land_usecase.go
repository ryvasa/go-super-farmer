// Code generated by MockGen. DO NOT EDIT.
// Source: service_api/usecase/interface/land_usecase_interface.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	domain "github.com/ryvasa/go-super-farmer/service_api/model/domain"
	dto "github.com/ryvasa/go-super-farmer/service_api/model/dto"
)

// MockLandUsecase is a mock of LandUsecase interface.
type MockLandUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockLandUsecaseMockRecorder
}

// MockLandUsecaseMockRecorder is the mock recorder for MockLandUsecase.
type MockLandUsecaseMockRecorder struct {
	mock *MockLandUsecase
}

// NewMockLandUsecase creates a new mock instance.
func NewMockLandUsecase(ctrl *gomock.Controller) *MockLandUsecase {
	mock := &MockLandUsecase{ctrl: ctrl}
	mock.recorder = &MockLandUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLandUsecase) EXPECT() *MockLandUsecaseMockRecorder {
	return m.recorder
}

// CreateLand mocks base method.
func (m *MockLandUsecase) CreateLand(ctx context.Context, userId uuid.UUID, req *dto.LandCreateDTO) (*domain.Land, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLand", ctx, userId, req)
	ret0, _ := ret[0].(*domain.Land)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLand indicates an expected call of CreateLand.
func (mr *MockLandUsecaseMockRecorder) CreateLand(ctx, userId, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLand", reflect.TypeOf((*MockLandUsecase)(nil).CreateLand), ctx, userId, req)
}

// DeleteLand mocks base method.
func (m *MockLandUsecase) DeleteLand(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLand", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLand indicates an expected call of DeleteLand.
func (mr *MockLandUsecaseMockRecorder) DeleteLand(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLand", reflect.TypeOf((*MockLandUsecase)(nil).DeleteLand), ctx, id)
}

// GetAllLands mocks base method.
func (m *MockLandUsecase) GetAllLands(ctx context.Context) ([]*domain.Land, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllLands", ctx)
	ret0, _ := ret[0].([]*domain.Land)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllLands indicates an expected call of GetAllLands.
func (mr *MockLandUsecaseMockRecorder) GetAllLands(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllLands", reflect.TypeOf((*MockLandUsecase)(nil).GetAllLands), ctx)
}

// GetLandByID mocks base method.
func (m *MockLandUsecase) GetLandByID(ctx context.Context, id uuid.UUID) (*domain.Land, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLandByID", ctx, id)
	ret0, _ := ret[0].(*domain.Land)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLandByID indicates an expected call of GetLandByID.
func (mr *MockLandUsecaseMockRecorder) GetLandByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLandByID", reflect.TypeOf((*MockLandUsecase)(nil).GetLandByID), ctx, id)
}

// GetLandByUserID mocks base method.
func (m *MockLandUsecase) GetLandByUserID(ctx context.Context, userID uuid.UUID) ([]*domain.Land, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLandByUserID", ctx, userID)
	ret0, _ := ret[0].([]*domain.Land)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLandByUserID indicates an expected call of GetLandByUserID.
func (mr *MockLandUsecaseMockRecorder) GetLandByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLandByUserID", reflect.TypeOf((*MockLandUsecase)(nil).GetLandByUserID), ctx, userID)
}

// RestoreLand mocks base method.
func (m *MockLandUsecase) RestoreLand(ctx context.Context, id uuid.UUID) (*domain.Land, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreLand", ctx, id)
	ret0, _ := ret[0].(*domain.Land)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreLand indicates an expected call of RestoreLand.
func (mr *MockLandUsecaseMockRecorder) RestoreLand(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreLand", reflect.TypeOf((*MockLandUsecase)(nil).RestoreLand), ctx, id)
}

// UpdateLand mocks base method.
func (m *MockLandUsecase) UpdateLand(ctx context.Context, userId, id uuid.UUID, req *dto.LandUpdateDTO) (*domain.Land, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLand", ctx, userId, id, req)
	ret0, _ := ret[0].(*domain.Land)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLand indicates an expected call of UpdateLand.
func (mr *MockLandUsecaseMockRecorder) UpdateLand(ctx, userId, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLand", reflect.TypeOf((*MockLandUsecase)(nil).UpdateLand), ctx, userId, id, req)
}
