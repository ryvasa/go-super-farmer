// Code generated by MockGen. DO NOT EDIT.
// Source: service_api/usecase/interface/demand_usecase_interface.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	domain "github.com/ryvasa/go-super-farmer/service_api/model/domain"
	dto "github.com/ryvasa/go-super-farmer/service_api/model/dto"
)

// MockDemandUsecase is a mock of DemandUsecase interface.
type MockDemandUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockDemandUsecaseMockRecorder
}

// MockDemandUsecaseMockRecorder is the mock recorder for MockDemandUsecase.
type MockDemandUsecaseMockRecorder struct {
	mock *MockDemandUsecase
}

// NewMockDemandUsecase creates a new mock instance.
func NewMockDemandUsecase(ctrl *gomock.Controller) *MockDemandUsecase {
	mock := &MockDemandUsecase{ctrl: ctrl}
	mock.recorder = &MockDemandUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDemandUsecase) EXPECT() *MockDemandUsecaseMockRecorder {
	return m.recorder
}

// CreateDemand mocks base method.
func (m *MockDemandUsecase) CreateDemand(ctx context.Context, req *dto.DemandCreateDTO) (*domain.Demand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDemand", ctx, req)
	ret0, _ := ret[0].(*domain.Demand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDemand indicates an expected call of CreateDemand.
func (mr *MockDemandUsecaseMockRecorder) CreateDemand(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDemand", reflect.TypeOf((*MockDemandUsecase)(nil).CreateDemand), ctx, req)
}

// DeleteDemand mocks base method.
func (m *MockDemandUsecase) DeleteDemand(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDemand", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDemand indicates an expected call of DeleteDemand.
func (mr *MockDemandUsecaseMockRecorder) DeleteDemand(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDemand", reflect.TypeOf((*MockDemandUsecase)(nil).DeleteDemand), ctx, id)
}

// GetAllDemands mocks base method.
func (m *MockDemandUsecase) GetAllDemands(ctx context.Context) ([]*domain.Demand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDemands", ctx)
	ret0, _ := ret[0].([]*domain.Demand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDemands indicates an expected call of GetAllDemands.
func (mr *MockDemandUsecaseMockRecorder) GetAllDemands(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDemands", reflect.TypeOf((*MockDemandUsecase)(nil).GetAllDemands), ctx)
}

// GetDemandByID mocks base method.
func (m *MockDemandUsecase) GetDemandByID(ctx context.Context, id uuid.UUID) (*domain.Demand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDemandByID", ctx, id)
	ret0, _ := ret[0].(*domain.Demand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDemandByID indicates an expected call of GetDemandByID.
func (mr *MockDemandUsecaseMockRecorder) GetDemandByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDemandByID", reflect.TypeOf((*MockDemandUsecase)(nil).GetDemandByID), ctx, id)
}

// GetDemandHistoryByCommodityIDAndCityID mocks base method.
func (m *MockDemandUsecase) GetDemandHistoryByCommodityIDAndCityID(ctx context.Context, commodityID uuid.UUID, cityID int64) ([]*domain.DemandHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDemandHistoryByCommodityIDAndCityID", ctx, commodityID, cityID)
	ret0, _ := ret[0].([]*domain.DemandHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDemandHistoryByCommodityIDAndCityID indicates an expected call of GetDemandHistoryByCommodityIDAndCityID.
func (mr *MockDemandUsecaseMockRecorder) GetDemandHistoryByCommodityIDAndCityID(ctx, commodityID, cityID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDemandHistoryByCommodityIDAndCityID", reflect.TypeOf((*MockDemandUsecase)(nil).GetDemandHistoryByCommodityIDAndCityID), ctx, commodityID, cityID)
}

// GetDemandsByCityID mocks base method.
func (m *MockDemandUsecase) GetDemandsByCityID(ctx context.Context, cityID int64) ([]*domain.Demand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDemandsByCityID", ctx, cityID)
	ret0, _ := ret[0].([]*domain.Demand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDemandsByCityID indicates an expected call of GetDemandsByCityID.
func (mr *MockDemandUsecaseMockRecorder) GetDemandsByCityID(ctx, cityID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDemandsByCityID", reflect.TypeOf((*MockDemandUsecase)(nil).GetDemandsByCityID), ctx, cityID)
}

// GetDemandsByCommodityID mocks base method.
func (m *MockDemandUsecase) GetDemandsByCommodityID(ctx context.Context, commodityID uuid.UUID) ([]*domain.Demand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDemandsByCommodityID", ctx, commodityID)
	ret0, _ := ret[0].([]*domain.Demand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDemandsByCommodityID indicates an expected call of GetDemandsByCommodityID.
func (mr *MockDemandUsecaseMockRecorder) GetDemandsByCommodityID(ctx, commodityID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDemandsByCommodityID", reflect.TypeOf((*MockDemandUsecase)(nil).GetDemandsByCommodityID), ctx, commodityID)
}

// UpdateDemand mocks base method.
func (m *MockDemandUsecase) UpdateDemand(ctx context.Context, id uuid.UUID, req *dto.DemandUpdateDTO) (*domain.Demand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDemand", ctx, id, req)
	ret0, _ := ret[0].(*domain.Demand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDemand indicates an expected call of UpdateDemand.
func (mr *MockDemandUsecaseMockRecorder) UpdateDemand(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDemand", reflect.TypeOf((*MockDemandUsecase)(nil).UpdateDemand), ctx, id, req)
}
