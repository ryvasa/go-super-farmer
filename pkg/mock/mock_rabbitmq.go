// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/messages/rabbitmq_interface.go

// Package mock_pkg is a generated GoMock package.
package mock_pkg

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	amqp091 "github.com/rabbitmq/amqp091-go"
)

// MockRabbitMQ is a mock of RabbitMQ interface.
type MockRabbitMQ struct {
	ctrl     *gomock.Controller
	recorder *MockRabbitMQMockRecorder
}

// MockRabbitMQMockRecorder is the mock recorder for MockRabbitMQ.
type MockRabbitMQMockRecorder struct {
	mock *MockRabbitMQ
}

// NewMockRabbitMQ creates a new mock instance.
func NewMockRabbitMQ(ctrl *gomock.Controller) *MockRabbitMQ {
	mock := &MockRabbitMQ{ctrl: ctrl}
	mock.recorder = &MockRabbitMQMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRabbitMQ) EXPECT() *MockRabbitMQMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRabbitMQ) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockRabbitMQMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRabbitMQ)(nil).Close))
}

// ConsumeMessages mocks base method.
func (m *MockRabbitMQ) ConsumeMessages(queueName string) (<-chan amqp091.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeMessages", queueName)
	ret0, _ := ret[0].(<-chan amqp091.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsumeMessages indicates an expected call of ConsumeMessages.
func (mr *MockRabbitMQMockRecorder) ConsumeMessages(queueName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeMessages", reflect.TypeOf((*MockRabbitMQ)(nil).ConsumeMessages), queueName)
}

// DeclareQueue mocks base method.
func (m *MockRabbitMQ) DeclareQueue(name string) (amqp091.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeclareQueue", name)
	ret0, _ := ret[0].(amqp091.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeclareQueue indicates an expected call of DeclareQueue.
func (mr *MockRabbitMQMockRecorder) DeclareQueue(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclareQueue", reflect.TypeOf((*MockRabbitMQ)(nil).DeclareQueue), name)
}

// Publish mocks base method.
func (m *MockRabbitMQ) Publish(ctx context.Context, exchange, routingKey string, body []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, exchange, routingKey, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockRabbitMQMockRecorder) Publish(ctx, exchange, routingKey, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockRabbitMQ)(nil).Publish), ctx, exchange, routingKey, body)
}

// PublishJSON mocks base method.
func (m *MockRabbitMQ) PublishJSON(ctx context.Context, exchange, routingKey string, data interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishJSON", ctx, exchange, routingKey, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishJSON indicates an expected call of PublishJSON.
func (mr *MockRabbitMQMockRecorder) PublishJSON(ctx, exchange, routingKey, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishJSON", reflect.TypeOf((*MockRabbitMQ)(nil).PublishJSON), ctx, exchange, routingKey, data)
}
