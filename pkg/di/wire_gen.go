// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"github.com/ryvasa/go-super-farmer/internal/delivery/http/handler"
	"github.com/ryvasa/go-super-farmer/internal/delivery/http/route"
	"github.com/ryvasa/go-super-farmer/internal/repository"
	"github.com/ryvasa/go-super-farmer/internal/usecase"
	"github.com/ryvasa/go-super-farmer/pkg/auth/token"
	"github.com/ryvasa/go-super-farmer/pkg/database"
	"github.com/ryvasa/go-super-farmer/pkg/env"
	"github.com/ryvasa/go-super-farmer/utils"
)

// Injectors from wire.go:

func InitializeRouter() (*gin.Engine, error) {
	envEnv, err := env.LoadEnv()
	if err != nil {
		return nil, err
	}
	string2, err := database.ProvideDSN(envEnv)
	if err != nil {
		return nil, err
	}
	db, err := database.ConnectDB(string2)
	if err != nil {
		return nil, err
	}
	roleRepository := repository.NewRoleRepository(db)
	roleUsecase := usecase.NewRoleUsecase(roleRepository)
	roleHandler := handler.NewRoleHandler(roleUsecase)
	userRepository := repository.NewUserRepository(db)
	hasher := utils.NewHasher()
	userUsecase := usecase.NewUserUsecase(userRepository, hasher)
	userHandler := handler.NewUserHandler(userUsecase)
	landRepository := repository.NewLandRepository(db)
	landUsecase := usecase.NewLandUsecase(landRepository, userRepository)
	authUtil := utils.NewAuthUtil()
	landHandler := handler.NewLandHandler(landUsecase, authUtil)
	tokenToken := token.NewToken(envEnv)
	authUsecase := usecase.NewAuthUsecase(userRepository, tokenToken, hasher)
	authHandler := handler.NewAuthHandler(authUsecase)
	commodityRepository := repository.NewCommodityRepository(db)
	commodityUsecase := usecase.NewCommodityUsecase(commodityRepository)
	commodityHandler := handler.NewCommodityHandler(commodityUsecase)
	landCommodityRepository := repository.NewLandCommodityRepository(db)
	landCommodityUsecase := usecase.NewLandCommodityUsecase(landCommodityRepository, landRepository, commodityRepository)
	landCommodityHandler := handler.NewLandCommodityHandler(landCommodityUsecase)
	priceRepository := repository.NewPriceRepository(db)
	priceHistoryRepository := repository.NewPriceHistoryRepository(db)
	regionRepository := repository.NewRegionRepository(db)
	priceUsecase := usecase.NewPriceUsecase(priceRepository, priceHistoryRepository, regionRepository, commodityRepository)
	priceHandler := handler.NewPriceHandler(priceUsecase)
	provinceRepository := repository.NewProvinceRepository(db)
	provinceUsecase := usecase.NewProvinceUsecase(provinceRepository)
	provinceHandler := handler.NewProvinceHandler(provinceUsecase)
	cityRepository := repository.NewCityRepository(db)
	cityUsecase := usecase.NewCityUsecase(cityRepository)
	cityHandler := handler.NewCityHandler(cityUsecase)
	regionUseCase := usecase.NewRegionUsecase(regionRepository, cityRepository, provinceRepository)
	regionHandler := handler.NewRegionHandler(regionUseCase)
	handlers := handler.NewHandlers(roleHandler, userHandler, landHandler, authHandler, commodityHandler, landCommodityHandler, priceHandler, provinceHandler, cityHandler, regionHandler)
	engine := route.NewRouter(handlers)
	return engine, nil
}

// wire.go:

var roleSet = wire.NewSet(repository.NewRoleRepository, usecase.NewRoleUsecase, handler.NewRoleHandler)

var userSet = wire.NewSet(repository.NewUserRepository, usecase.NewUserUsecase, handler.NewUserHandler)

var landSet = wire.NewSet(repository.NewLandRepository, usecase.NewLandUsecase, handler.NewLandHandler)

var authSet = wire.NewSet(usecase.NewAuthUsecase, handler.NewAuthHandler)

var tokenSet = wire.NewSet(token.NewToken)

var authUtilSet = wire.NewSet(utils.NewAuthUtil)

var hashSet = wire.NewSet(utils.NewHasher)

var commoditySet = wire.NewSet(repository.NewCommodityRepository, usecase.NewCommodityUsecase, handler.NewCommodityHandler)

var landCommoditySet = wire.NewSet(repository.NewLandCommodityRepository, usecase.NewLandCommodityUsecase, handler.NewLandCommodityHandler)

var priceSet = wire.NewSet(repository.NewPriceRepository, usecase.NewPriceUsecase, handler.NewPriceHandler)

var provinceSet = wire.NewSet(repository.NewProvinceRepository, usecase.NewProvinceUsecase, handler.NewProvinceHandler)

var citySet = wire.NewSet(repository.NewCityRepository, usecase.NewCityUsecase, handler.NewCityHandler)

var regionSet = wire.NewSet(repository.NewRegionRepository, usecase.NewRegionUsecase, handler.NewRegionHandler)

var priceHistorySet = wire.NewSet(repository.NewPriceHistoryRepository)
