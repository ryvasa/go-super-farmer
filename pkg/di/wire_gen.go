// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"github.com/ryvasa/go-super-farmer/internal/delivery/http/handler"
	"github.com/ryvasa/go-super-farmer/internal/delivery/http/route"
	"github.com/ryvasa/go-super-farmer/internal/repository"
	"github.com/ryvasa/go-super-farmer/internal/usecase"
	"github.com/ryvasa/go-super-farmer/pkg/database"
	"github.com/ryvasa/go-super-farmer/pkg/env"
)

// Injectors from wire.go:

func InitializeRouter() (*gin.Engine, error) {
	envEnv, err := env.LoadEnv()
	if err != nil {
		return nil, err
	}
	string2, err := database.ProvideDSN(envEnv)
	if err != nil {
		return nil, err
	}
	db, err := database.ConnectDB(string2)
	if err != nil {
		return nil, err
	}
	roleRepository := repository.NewRoleRepository(db)
	roleUsecase := usecase.NewRoleUsecase(roleRepository)
	roleHandler := handler.NewRoleHandler(roleUsecase)
	userRepository := repository.NewUserRepository(db)
	userUsecase := usecase.NewUserUsecase(userRepository)
	userHandler := handler.NewUserHandler(userUsecase)
	handlers := handler.NewHandlers(roleHandler, userHandler)
	engine := route.NewRouter(handlers)
	return engine, nil
}

// wire.go:

var roleSet = wire.NewSet(repository.NewRoleRepository, usecase.NewRoleUsecase, handler.NewRoleHandler)

var userSet = wire.NewSet(repository.NewUserRepository, usecase.NewUserUsecase, handler.NewUserHandler)
