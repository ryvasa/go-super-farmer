// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/region_usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	domain "github.com/ryvasa/go-super-farmer/internal/model/domain"
	dto "github.com/ryvasa/go-super-farmer/internal/model/dto"
)

// MockRegionUsecase is a mock of RegionUsecase interface.
type MockRegionUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockRegionUsecaseMockRecorder
}

// MockRegionUsecaseMockRecorder is the mock recorder for MockRegionUsecase.
type MockRegionUsecaseMockRecorder struct {
	mock *MockRegionUsecase
}

// NewMockRegionUsecase creates a new mock instance.
func NewMockRegionUsecase(ctrl *gomock.Controller) *MockRegionUsecase {
	mock := &MockRegionUsecase{ctrl: ctrl}
	mock.recorder = &MockRegionUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegionUsecase) EXPECT() *MockRegionUsecaseMockRecorder {
	return m.recorder
}

// CreateRegion mocks base method.
func (m *MockRegionUsecase) CreateRegion(ctx context.Context, req *dto.RegionCreateDto) (*domain.Region, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegion", ctx, req)
	ret0, _ := ret[0].(*domain.Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegion indicates an expected call of CreateRegion.
func (mr *MockRegionUsecaseMockRecorder) CreateRegion(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegion", reflect.TypeOf((*MockRegionUsecase)(nil).CreateRegion), ctx, req)
}

// GetAllRegions mocks base method.
func (m *MockRegionUsecase) GetAllRegions(ctx context.Context) (*[]domain.Region, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRegions", ctx)
	ret0, _ := ret[0].(*[]domain.Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRegions indicates an expected call of GetAllRegions.
func (mr *MockRegionUsecaseMockRecorder) GetAllRegions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRegions", reflect.TypeOf((*MockRegionUsecase)(nil).GetAllRegions), ctx)
}

// GetRegionByID mocks base method.
func (m *MockRegionUsecase) GetRegionByID(ctx context.Context, id uuid.UUID) (*domain.Region, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegionByID", ctx, id)
	ret0, _ := ret[0].(*domain.Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegionByID indicates an expected call of GetRegionByID.
func (mr *MockRegionUsecaseMockRecorder) GetRegionByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegionByID", reflect.TypeOf((*MockRegionUsecase)(nil).GetRegionByID), ctx, id)
}
