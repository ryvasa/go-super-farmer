// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/interface/price_usecase_interface.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	domain "github.com/ryvasa/go-super-farmer/internal/model/domain"
	dto "github.com/ryvasa/go-super-farmer/internal/model/dto"
)

// MockPriceUsecase is a mock of PriceUsecase interface.
type MockPriceUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockPriceUsecaseMockRecorder
}

// MockPriceUsecaseMockRecorder is the mock recorder for MockPriceUsecase.
type MockPriceUsecaseMockRecorder struct {
	mock *MockPriceUsecase
}

// NewMockPriceUsecase creates a new mock instance.
func NewMockPriceUsecase(ctrl *gomock.Controller) *MockPriceUsecase {
	mock := &MockPriceUsecase{ctrl: ctrl}
	mock.recorder = &MockPriceUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPriceUsecase) EXPECT() *MockPriceUsecaseMockRecorder {
	return m.recorder
}

// CreatePrice mocks base method.
func (m *MockPriceUsecase) CreatePrice(ctx context.Context, req *dto.PriceCreateDTO) (*domain.Price, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePrice", ctx, req)
	ret0, _ := ret[0].(*domain.Price)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePrice indicates an expected call of CreatePrice.
func (mr *MockPriceUsecaseMockRecorder) CreatePrice(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrice", reflect.TypeOf((*MockPriceUsecase)(nil).CreatePrice), ctx, req)
}

// DeletePrice mocks base method.
func (m *MockPriceUsecase) DeletePrice(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePrice", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePrice indicates an expected call of DeletePrice.
func (mr *MockPriceUsecaseMockRecorder) DeletePrice(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePrice", reflect.TypeOf((*MockPriceUsecase)(nil).DeletePrice), ctx, id)
}

// DownloadPriceHistoryByCommodityIDAndCityID mocks base method.
func (m *MockPriceUsecase) DownloadPriceHistoryByCommodityIDAndCityID(ctx context.Context, params *dto.PriceParamsDTO) (*dto.DownloadResponseDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadPriceHistoryByCommodityIDAndCityID", ctx, params)
	ret0, _ := ret[0].(*dto.DownloadResponseDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadPriceHistoryByCommodityIDAndCityID indicates an expected call of DownloadPriceHistoryByCommodityIDAndCityID.
func (mr *MockPriceUsecaseMockRecorder) DownloadPriceHistoryByCommodityIDAndCityID(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadPriceHistoryByCommodityIDAndCityID", reflect.TypeOf((*MockPriceUsecase)(nil).DownloadPriceHistoryByCommodityIDAndCityID), ctx, params)
}

// GetAllPrices mocks base method.
func (m *MockPriceUsecase) GetAllPrices(ctx context.Context) ([]*domain.Price, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPrices", ctx)
	ret0, _ := ret[0].([]*domain.Price)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPrices indicates an expected call of GetAllPrices.
func (mr *MockPriceUsecaseMockRecorder) GetAllPrices(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPrices", reflect.TypeOf((*MockPriceUsecase)(nil).GetAllPrices), ctx)
}

// GetPriceByCommodityIDAndCityID mocks base method.
func (m *MockPriceUsecase) GetPriceByCommodityIDAndCityID(ctx context.Context, commodityID uuid.UUID, cityID int64) (*domain.Price, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPriceByCommodityIDAndCityID", ctx, commodityID, cityID)
	ret0, _ := ret[0].(*domain.Price)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPriceByCommodityIDAndCityID indicates an expected call of GetPriceByCommodityIDAndCityID.
func (mr *MockPriceUsecaseMockRecorder) GetPriceByCommodityIDAndCityID(ctx, commodityID, cityID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPriceByCommodityIDAndCityID", reflect.TypeOf((*MockPriceUsecase)(nil).GetPriceByCommodityIDAndCityID), ctx, commodityID, cityID)
}

// GetPriceByID mocks base method.
func (m *MockPriceUsecase) GetPriceByID(ctx context.Context, id uuid.UUID) (*domain.Price, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPriceByID", ctx, id)
	ret0, _ := ret[0].(*domain.Price)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPriceByID indicates an expected call of GetPriceByID.
func (mr *MockPriceUsecaseMockRecorder) GetPriceByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPriceByID", reflect.TypeOf((*MockPriceUsecase)(nil).GetPriceByID), ctx, id)
}

// GetPriceExcelFile mocks base method.
func (m *MockPriceUsecase) GetPriceExcelFile(ctx context.Context, params *dto.PriceParamsDTO) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPriceExcelFile", ctx, params)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPriceExcelFile indicates an expected call of GetPriceExcelFile.
func (mr *MockPriceUsecaseMockRecorder) GetPriceExcelFile(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPriceExcelFile", reflect.TypeOf((*MockPriceUsecase)(nil).GetPriceExcelFile), ctx, params)
}

// GetPriceHistoryByCommodityIDAndCityID mocks base method.
func (m *MockPriceUsecase) GetPriceHistoryByCommodityIDAndCityID(ctx context.Context, commodityID uuid.UUID, cityID int64) ([]*domain.PriceHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPriceHistoryByCommodityIDAndCityID", ctx, commodityID, cityID)
	ret0, _ := ret[0].([]*domain.PriceHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPriceHistoryByCommodityIDAndCityID indicates an expected call of GetPriceHistoryByCommodityIDAndCityID.
func (mr *MockPriceUsecaseMockRecorder) GetPriceHistoryByCommodityIDAndCityID(ctx, commodityID, cityID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPriceHistoryByCommodityIDAndCityID", reflect.TypeOf((*MockPriceUsecase)(nil).GetPriceHistoryByCommodityIDAndCityID), ctx, commodityID, cityID)
}

// GetPricesByCityID mocks base method.
func (m *MockPriceUsecase) GetPricesByCityID(ctx context.Context, cityID int64) ([]*domain.Price, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPricesByCityID", ctx, cityID)
	ret0, _ := ret[0].([]*domain.Price)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPricesByCityID indicates an expected call of GetPricesByCityID.
func (mr *MockPriceUsecaseMockRecorder) GetPricesByCityID(ctx, cityID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPricesByCityID", reflect.TypeOf((*MockPriceUsecase)(nil).GetPricesByCityID), ctx, cityID)
}

// GetPricesByCommodityID mocks base method.
func (m *MockPriceUsecase) GetPricesByCommodityID(ctx context.Context, commodityID uuid.UUID) ([]*domain.Price, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPricesByCommodityID", ctx, commodityID)
	ret0, _ := ret[0].([]*domain.Price)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPricesByCommodityID indicates an expected call of GetPricesByCommodityID.
func (mr *MockPriceUsecaseMockRecorder) GetPricesByCommodityID(ctx, commodityID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPricesByCommodityID", reflect.TypeOf((*MockPriceUsecase)(nil).GetPricesByCommodityID), ctx, commodityID)
}

// RestorePrice mocks base method.
func (m *MockPriceUsecase) RestorePrice(ctx context.Context, id uuid.UUID) (*domain.Price, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestorePrice", ctx, id)
	ret0, _ := ret[0].(*domain.Price)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestorePrice indicates an expected call of RestorePrice.
func (mr *MockPriceUsecaseMockRecorder) RestorePrice(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestorePrice", reflect.TypeOf((*MockPriceUsecase)(nil).RestorePrice), ctx, id)
}

// UpdatePrice mocks base method.
func (m *MockPriceUsecase) UpdatePrice(ctx context.Context, id uuid.UUID, req *dto.PriceUpdateDTO) (*domain.Price, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePrice", ctx, id, req)
	ret0, _ := ret[0].(*domain.Price)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePrice indicates an expected call of UpdatePrice.
func (mr *MockPriceUsecaseMockRecorder) UpdatePrice(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePrice", reflect.TypeOf((*MockPriceUsecase)(nil).UpdatePrice), ctx, id, req)
}
