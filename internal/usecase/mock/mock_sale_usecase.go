// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/interface/sale_usecase_interface.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	domain "github.com/ryvasa/go-super-farmer/internal/model/domain"
	dto "github.com/ryvasa/go-super-farmer/internal/model/dto"
)

// MockSaleUsecase is a mock of SaleUsecase interface.
type MockSaleUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockSaleUsecaseMockRecorder
}

// MockSaleUsecaseMockRecorder is the mock recorder for MockSaleUsecase.
type MockSaleUsecaseMockRecorder struct {
	mock *MockSaleUsecase
}

// NewMockSaleUsecase creates a new mock instance.
func NewMockSaleUsecase(ctrl *gomock.Controller) *MockSaleUsecase {
	mock := &MockSaleUsecase{ctrl: ctrl}
	mock.recorder = &MockSaleUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSaleUsecase) EXPECT() *MockSaleUsecaseMockRecorder {
	return m.recorder
}

// CreateSale mocks base method.
func (m *MockSaleUsecase) CreateSale(ctx context.Context, req *dto.SaleCreateDTO) (*domain.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSale", ctx, req)
	ret0, _ := ret[0].(*domain.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSale indicates an expected call of CreateSale.
func (mr *MockSaleUsecaseMockRecorder) CreateSale(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSale", reflect.TypeOf((*MockSaleUsecase)(nil).CreateSale), ctx, req)
}

// DeleteSale mocks base method.
func (m *MockSaleUsecase) DeleteSale(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSale", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSale indicates an expected call of DeleteSale.
func (mr *MockSaleUsecaseMockRecorder) DeleteSale(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSale", reflect.TypeOf((*MockSaleUsecase)(nil).DeleteSale), ctx, id)
}

// GetAllDeletedSales mocks base method.
func (m *MockSaleUsecase) GetAllDeletedSales(ctx context.Context, pagination *dto.PaginationDTO) (*dto.PaginationResponseDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDeletedSales", ctx, pagination)
	ret0, _ := ret[0].(*dto.PaginationResponseDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDeletedSales indicates an expected call of GetAllDeletedSales.
func (mr *MockSaleUsecaseMockRecorder) GetAllDeletedSales(ctx, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDeletedSales", reflect.TypeOf((*MockSaleUsecase)(nil).GetAllDeletedSales), ctx, pagination)
}

// GetAllSales mocks base method.
func (m *MockSaleUsecase) GetAllSales(ctx context.Context, pagination *dto.PaginationDTO) (*dto.PaginationResponseDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSales", ctx, pagination)
	ret0, _ := ret[0].(*dto.PaginationResponseDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSales indicates an expected call of GetAllSales.
func (mr *MockSaleUsecaseMockRecorder) GetAllSales(ctx, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSales", reflect.TypeOf((*MockSaleUsecase)(nil).GetAllSales), ctx, pagination)
}

// GetDeletedSaleByID mocks base method.
func (m *MockSaleUsecase) GetDeletedSaleByID(ctx context.Context, id uuid.UUID) (*domain.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeletedSaleByID", ctx, id)
	ret0, _ := ret[0].(*domain.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeletedSaleByID indicates an expected call of GetDeletedSaleByID.
func (mr *MockSaleUsecaseMockRecorder) GetDeletedSaleByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeletedSaleByID", reflect.TypeOf((*MockSaleUsecase)(nil).GetDeletedSaleByID), ctx, id)
}

// GetSaleByID mocks base method.
func (m *MockSaleUsecase) GetSaleByID(ctx context.Context, id uuid.UUID) (*domain.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSaleByID", ctx, id)
	ret0, _ := ret[0].(*domain.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSaleByID indicates an expected call of GetSaleByID.
func (mr *MockSaleUsecaseMockRecorder) GetSaleByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSaleByID", reflect.TypeOf((*MockSaleUsecase)(nil).GetSaleByID), ctx, id)
}

// GetSalesByCityID mocks base method.
func (m *MockSaleUsecase) GetSalesByCityID(ctx context.Context, pagination *dto.PaginationDTO, id int64) (*dto.PaginationResponseDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSalesByCityID", ctx, pagination, id)
	ret0, _ := ret[0].(*dto.PaginationResponseDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSalesByCityID indicates an expected call of GetSalesByCityID.
func (mr *MockSaleUsecaseMockRecorder) GetSalesByCityID(ctx, pagination, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSalesByCityID", reflect.TypeOf((*MockSaleUsecase)(nil).GetSalesByCityID), ctx, pagination, id)
}

// GetSalesByCommodityID mocks base method.
func (m *MockSaleUsecase) GetSalesByCommodityID(ctx context.Context, pagination *dto.PaginationDTO, id uuid.UUID) (*dto.PaginationResponseDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSalesByCommodityID", ctx, pagination, id)
	ret0, _ := ret[0].(*dto.PaginationResponseDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSalesByCommodityID indicates an expected call of GetSalesByCommodityID.
func (mr *MockSaleUsecaseMockRecorder) GetSalesByCommodityID(ctx, pagination, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSalesByCommodityID", reflect.TypeOf((*MockSaleUsecase)(nil).GetSalesByCommodityID), ctx, pagination, id)
}

// RestoreSale mocks base method.
func (m *MockSaleUsecase) RestoreSale(ctx context.Context, id uuid.UUID) (*domain.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreSale", ctx, id)
	ret0, _ := ret[0].(*domain.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreSale indicates an expected call of RestoreSale.
func (mr *MockSaleUsecaseMockRecorder) RestoreSale(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreSale", reflect.TypeOf((*MockSaleUsecase)(nil).RestoreSale), ctx, id)
}

// UpdateSale mocks base method.
func (m *MockSaleUsecase) UpdateSale(ctx context.Context, id uuid.UUID, req *dto.SaleUpdateDTO) (*domain.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSale", ctx, id, req)
	ret0, _ := ret[0].(*domain.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSale indicates an expected call of UpdateSale.
func (mr *MockSaleUsecaseMockRecorder) UpdateSale(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSale", reflect.TypeOf((*MockSaleUsecase)(nil).UpdateSale), ctx, id, req)
}
