// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/interface/auth_usecase_interface.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/ryvasa/go-super-farmer/internal/model/dto"
)

// MockAuthUsecase is a mock of AuthUsecase interface.
type MockAuthUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAuthUsecaseMockRecorder
}

// MockAuthUsecaseMockRecorder is the mock recorder for MockAuthUsecase.
type MockAuthUsecaseMockRecorder struct {
	mock *MockAuthUsecase
}

// NewMockAuthUsecase creates a new mock instance.
func NewMockAuthUsecase(ctrl *gomock.Controller) *MockAuthUsecase {
	mock := &MockAuthUsecase{ctrl: ctrl}
	mock.recorder = &MockAuthUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthUsecase) EXPECT() *MockAuthUsecaseMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthUsecase) Login(ctx context.Context, req *dto.AuthDTO) (*dto.AuthResponseDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, req)
	ret0, _ := ret[0].(*dto.AuthResponseDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthUsecaseMockRecorder) Login(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthUsecase)(nil).Login), ctx, req)
}

// SendOTP mocks base method.
func (m *MockAuthUsecase) SendOTP(ctx context.Context, req *dto.AuthSendDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOTP", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendOTP indicates an expected call of SendOTP.
func (mr *MockAuthUsecaseMockRecorder) SendOTP(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOTP", reflect.TypeOf((*MockAuthUsecase)(nil).SendOTP), ctx, req)
}

// VerifyOTP mocks base method.
func (m *MockAuthUsecase) VerifyOTP(ctx context.Context, req *dto.AuthVerifyDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyOTP", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyOTP indicates an expected call of VerifyOTP.
func (mr *MockAuthUsecaseMockRecorder) VerifyOTP(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOTP", reflect.TypeOf((*MockAuthUsecase)(nil).VerifyOTP), ctx, req)
}
