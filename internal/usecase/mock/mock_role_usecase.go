// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/interface/role_usecase_interface.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/ryvasa/go-super-farmer/internal/model/domain"
	dto "github.com/ryvasa/go-super-farmer/internal/model/dto"
)

// MockRoleUsecase is a mock of RoleUsecase interface.
type MockRoleUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockRoleUsecaseMockRecorder
}

// MockRoleUsecaseMockRecorder is the mock recorder for MockRoleUsecase.
type MockRoleUsecaseMockRecorder struct {
	mock *MockRoleUsecase
}

// NewMockRoleUsecase creates a new mock instance.
func NewMockRoleUsecase(ctrl *gomock.Controller) *MockRoleUsecase {
	mock := &MockRoleUsecase{ctrl: ctrl}
	mock.recorder = &MockRoleUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleUsecase) EXPECT() *MockRoleUsecaseMockRecorder {
	return m.recorder
}

// CreateRole mocks base method.
func (m *MockRoleUsecase) CreateRole(ctx context.Context, role *dto.RoleCreateDTO) (*domain.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", ctx, role)
	ret0, _ := ret[0].(*domain.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockRoleUsecaseMockRecorder) CreateRole(ctx, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockRoleUsecase)(nil).CreateRole), ctx, role)
}

// GetAllRoles mocks base method.
func (m *MockRoleUsecase) GetAllRoles(ctx context.Context) ([]*domain.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRoles", ctx)
	ret0, _ := ret[0].([]*domain.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRoles indicates an expected call of GetAllRoles.
func (mr *MockRoleUsecaseMockRecorder) GetAllRoles(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRoles", reflect.TypeOf((*MockRoleUsecase)(nil).GetAllRoles), ctx)
}
