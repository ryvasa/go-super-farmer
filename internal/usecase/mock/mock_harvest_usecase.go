// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/harvest_usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	domain "github.com/ryvasa/go-super-farmer/internal/model/domain"
	dto "github.com/ryvasa/go-super-farmer/internal/model/dto"
)

// MockHarvestUsecase is a mock of HarvestUsecase interface.
type MockHarvestUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockHarvestUsecaseMockRecorder
}

// MockHarvestUsecaseMockRecorder is the mock recorder for MockHarvestUsecase.
type MockHarvestUsecaseMockRecorder struct {
	mock *MockHarvestUsecase
}

// NewMockHarvestUsecase creates a new mock instance.
func NewMockHarvestUsecase(ctrl *gomock.Controller) *MockHarvestUsecase {
	mock := &MockHarvestUsecase{ctrl: ctrl}
	mock.recorder = &MockHarvestUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHarvestUsecase) EXPECT() *MockHarvestUsecaseMockRecorder {
	return m.recorder
}

// CreateHarvest mocks base method.
func (m *MockHarvestUsecase) CreateHarvest(ctx context.Context, req *dto.HarvestCreateDTO) (*domain.Harvest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHarvest", ctx, req)
	ret0, _ := ret[0].(*domain.Harvest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHarvest indicates an expected call of CreateHarvest.
func (mr *MockHarvestUsecaseMockRecorder) CreateHarvest(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHarvest", reflect.TypeOf((*MockHarvestUsecase)(nil).CreateHarvest), ctx, req)
}

// DeleteHarvest mocks base method.
func (m *MockHarvestUsecase) DeleteHarvest(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHarvest", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHarvest indicates an expected call of DeleteHarvest.
func (mr *MockHarvestUsecaseMockRecorder) DeleteHarvest(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHarvest", reflect.TypeOf((*MockHarvestUsecase)(nil).DeleteHarvest), ctx, id)
}

// GetAllDeletedHarvest mocks base method.
func (m *MockHarvestUsecase) GetAllDeletedHarvest(ctx context.Context) ([]*domain.Harvest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDeletedHarvest", ctx)
	ret0, _ := ret[0].([]*domain.Harvest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDeletedHarvest indicates an expected call of GetAllDeletedHarvest.
func (mr *MockHarvestUsecaseMockRecorder) GetAllDeletedHarvest(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDeletedHarvest", reflect.TypeOf((*MockHarvestUsecase)(nil).GetAllDeletedHarvest), ctx)
}

// GetAllHarvest mocks base method.
func (m *MockHarvestUsecase) GetAllHarvest(ctx context.Context) ([]*domain.Harvest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllHarvest", ctx)
	ret0, _ := ret[0].([]*domain.Harvest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllHarvest indicates an expected call of GetAllHarvest.
func (mr *MockHarvestUsecaseMockRecorder) GetAllHarvest(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllHarvest", reflect.TypeOf((*MockHarvestUsecase)(nil).GetAllHarvest), ctx)
}

// GetHarvestByCommodityID mocks base method.
func (m *MockHarvestUsecase) GetHarvestByCommodityID(ctx context.Context, id uuid.UUID) ([]*domain.Harvest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHarvestByCommodityID", ctx, id)
	ret0, _ := ret[0].([]*domain.Harvest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHarvestByCommodityID indicates an expected call of GetHarvestByCommodityID.
func (mr *MockHarvestUsecaseMockRecorder) GetHarvestByCommodityID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHarvestByCommodityID", reflect.TypeOf((*MockHarvestUsecase)(nil).GetHarvestByCommodityID), ctx, id)
}

// GetHarvestByID mocks base method.
func (m *MockHarvestUsecase) GetHarvestByID(ctx context.Context, id uuid.UUID) (*domain.Harvest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHarvestByID", ctx, id)
	ret0, _ := ret[0].(*domain.Harvest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHarvestByID indicates an expected call of GetHarvestByID.
func (mr *MockHarvestUsecaseMockRecorder) GetHarvestByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHarvestByID", reflect.TypeOf((*MockHarvestUsecase)(nil).GetHarvestByID), ctx, id)
}

// GetHarvestByLandCommodityID mocks base method.
func (m *MockHarvestUsecase) GetHarvestByLandCommodityID(ctx context.Context, id uuid.UUID) ([]*domain.Harvest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHarvestByLandCommodityID", ctx, id)
	ret0, _ := ret[0].([]*domain.Harvest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHarvestByLandCommodityID indicates an expected call of GetHarvestByLandCommodityID.
func (mr *MockHarvestUsecaseMockRecorder) GetHarvestByLandCommodityID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHarvestByLandCommodityID", reflect.TypeOf((*MockHarvestUsecase)(nil).GetHarvestByLandCommodityID), ctx, id)
}

// GetHarvestByLandID mocks base method.
func (m *MockHarvestUsecase) GetHarvestByLandID(ctx context.Context, id uuid.UUID) ([]*domain.Harvest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHarvestByLandID", ctx, id)
	ret0, _ := ret[0].([]*domain.Harvest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHarvestByLandID indicates an expected call of GetHarvestByLandID.
func (mr *MockHarvestUsecaseMockRecorder) GetHarvestByLandID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHarvestByLandID", reflect.TypeOf((*MockHarvestUsecase)(nil).GetHarvestByLandID), ctx, id)
}

// GetHarvestByRegionID mocks base method.
func (m *MockHarvestUsecase) GetHarvestByRegionID(ctx context.Context, id uuid.UUID) ([]*domain.Harvest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHarvestByRegionID", ctx, id)
	ret0, _ := ret[0].([]*domain.Harvest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHarvestByRegionID indicates an expected call of GetHarvestByRegionID.
func (mr *MockHarvestUsecaseMockRecorder) GetHarvestByRegionID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHarvestByRegionID", reflect.TypeOf((*MockHarvestUsecase)(nil).GetHarvestByRegionID), ctx, id)
}

// GetHarvestDeletedByID mocks base method.
func (m *MockHarvestUsecase) GetHarvestDeletedByID(ctx context.Context, id uuid.UUID) (*domain.Harvest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHarvestDeletedByID", ctx, id)
	ret0, _ := ret[0].(*domain.Harvest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHarvestDeletedByID indicates an expected call of GetHarvestDeletedByID.
func (mr *MockHarvestUsecaseMockRecorder) GetHarvestDeletedByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHarvestDeletedByID", reflect.TypeOf((*MockHarvestUsecase)(nil).GetHarvestDeletedByID), ctx, id)
}

// RestoreHarvest mocks base method.
func (m *MockHarvestUsecase) RestoreHarvest(ctx context.Context, id uuid.UUID) (*domain.Harvest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreHarvest", ctx, id)
	ret0, _ := ret[0].(*domain.Harvest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreHarvest indicates an expected call of RestoreHarvest.
func (mr *MockHarvestUsecaseMockRecorder) RestoreHarvest(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreHarvest", reflect.TypeOf((*MockHarvestUsecase)(nil).RestoreHarvest), ctx, id)
}

// UpdateHarvest mocks base method.
func (m *MockHarvestUsecase) UpdateHarvest(ctx context.Context, id uuid.UUID, req *dto.HarvestUpdateDTO) (*domain.Harvest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHarvest", ctx, id, req)
	ret0, _ := ret[0].(*domain.Harvest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHarvest indicates an expected call of UpdateHarvest.
func (mr *MockHarvestUsecaseMockRecorder) UpdateHarvest(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHarvest", reflect.TypeOf((*MockHarvestUsecase)(nil).UpdateHarvest), ctx, id, req)
}
