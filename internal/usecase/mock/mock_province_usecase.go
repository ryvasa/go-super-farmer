// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/interface/province_usecase_interface.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/ryvasa/go-super-farmer/internal/model/domain"
	dto "github.com/ryvasa/go-super-farmer/internal/model/dto"
)

// MockProvinceUsecase is a mock of ProvinceUsecase interface.
type MockProvinceUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockProvinceUsecaseMockRecorder
}

// MockProvinceUsecaseMockRecorder is the mock recorder for MockProvinceUsecase.
type MockProvinceUsecaseMockRecorder struct {
	mock *MockProvinceUsecase
}

// NewMockProvinceUsecase creates a new mock instance.
func NewMockProvinceUsecase(ctrl *gomock.Controller) *MockProvinceUsecase {
	mock := &MockProvinceUsecase{ctrl: ctrl}
	mock.recorder = &MockProvinceUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvinceUsecase) EXPECT() *MockProvinceUsecaseMockRecorder {
	return m.recorder
}

// CreateProvince mocks base method.
func (m *MockProvinceUsecase) CreateProvince(ctx context.Context, req *dto.ProvinceCreateDTO) (*domain.Province, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProvince", ctx, req)
	ret0, _ := ret[0].(*domain.Province)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProvince indicates an expected call of CreateProvince.
func (mr *MockProvinceUsecaseMockRecorder) CreateProvince(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProvince", reflect.TypeOf((*MockProvinceUsecase)(nil).CreateProvince), ctx, req)
}

// DeleteProvince mocks base method.
func (m *MockProvinceUsecase) DeleteProvince(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProvince", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProvince indicates an expected call of DeleteProvince.
func (mr *MockProvinceUsecaseMockRecorder) DeleteProvince(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProvince", reflect.TypeOf((*MockProvinceUsecase)(nil).DeleteProvince), ctx, id)
}

// GetAllProvinces mocks base method.
func (m *MockProvinceUsecase) GetAllProvinces(ctx context.Context) ([]*domain.Province, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProvinces", ctx)
	ret0, _ := ret[0].([]*domain.Province)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProvinces indicates an expected call of GetAllProvinces.
func (mr *MockProvinceUsecaseMockRecorder) GetAllProvinces(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProvinces", reflect.TypeOf((*MockProvinceUsecase)(nil).GetAllProvinces), ctx)
}

// GetProvinceByID mocks base method.
func (m *MockProvinceUsecase) GetProvinceByID(ctx context.Context, id int64) (*domain.Province, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProvinceByID", ctx, id)
	ret0, _ := ret[0].(*domain.Province)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProvinceByID indicates an expected call of GetProvinceByID.
func (mr *MockProvinceUsecaseMockRecorder) GetProvinceByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProvinceByID", reflect.TypeOf((*MockProvinceUsecase)(nil).GetProvinceByID), ctx, id)
}

// UpdateProvince mocks base method.
func (m *MockProvinceUsecase) UpdateProvince(ctx context.Context, id int64, req *dto.ProvinceUpdateDTO) (*domain.Province, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProvince", ctx, id, req)
	ret0, _ := ret[0].(*domain.Province)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProvince indicates an expected call of UpdateProvince.
func (mr *MockProvinceUsecaseMockRecorder) UpdateProvince(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProvince", reflect.TypeOf((*MockProvinceUsecase)(nil).UpdateProvince), ctx, id, req)
}
