// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/price_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	domain "github.com/ryvasa/go-super-farmer/internal/model/domain"
)

// MockPriceRepository is a mock of PriceRepository interface.
type MockPriceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPriceRepositoryMockRecorder
}

// MockPriceRepositoryMockRecorder is the mock recorder for MockPriceRepository.
type MockPriceRepositoryMockRecorder struct {
	mock *MockPriceRepository
}

// NewMockPriceRepository creates a new mock instance.
func NewMockPriceRepository(ctrl *gomock.Controller) *MockPriceRepository {
	mock := &MockPriceRepository{ctrl: ctrl}
	mock.recorder = &MockPriceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPriceRepository) EXPECT() *MockPriceRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPriceRepository) Create(ctx context.Context, price *domain.Price) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, price)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPriceRepositoryMockRecorder) Create(ctx, price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPriceRepository)(nil).Create), ctx, price)
}

// Delete mocks base method.
func (m *MockPriceRepository) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPriceRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPriceRepository)(nil).Delete), ctx, id)
}

// FindAll mocks base method.
func (m *MockPriceRepository) FindAll(ctx context.Context) ([]*domain.Price, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]*domain.Price)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockPriceRepositoryMockRecorder) FindAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockPriceRepository)(nil).FindAll), ctx)
}

// FindByCommodityID mocks base method.
func (m *MockPriceRepository) FindByCommodityID(ctx context.Context, commodityID uuid.UUID) ([]*domain.Price, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCommodityID", ctx, commodityID)
	ret0, _ := ret[0].([]*domain.Price)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCommodityID indicates an expected call of FindByCommodityID.
func (mr *MockPriceRepositoryMockRecorder) FindByCommodityID(ctx, commodityID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCommodityID", reflect.TypeOf((*MockPriceRepository)(nil).FindByCommodityID), ctx, commodityID)
}

// FindByCommodityIDAndRegionID mocks base method.
func (m *MockPriceRepository) FindByCommodityIDAndRegionID(ctx context.Context, commodityID, regionID uuid.UUID) (*domain.Price, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCommodityIDAndRegionID", ctx, commodityID, regionID)
	ret0, _ := ret[0].(*domain.Price)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCommodityIDAndRegionID indicates an expected call of FindByCommodityIDAndRegionID.
func (mr *MockPriceRepositoryMockRecorder) FindByCommodityIDAndRegionID(ctx, commodityID, regionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCommodityIDAndRegionID", reflect.TypeOf((*MockPriceRepository)(nil).FindByCommodityIDAndRegionID), ctx, commodityID, regionID)
}

// FindByID mocks base method.
func (m *MockPriceRepository) FindByID(ctx context.Context, id uuid.UUID) (*domain.Price, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*domain.Price)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockPriceRepositoryMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockPriceRepository)(nil).FindByID), ctx, id)
}

// FindByRegionID mocks base method.
func (m *MockPriceRepository) FindByRegionID(ctx context.Context, regionID uuid.UUID) ([]*domain.Price, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByRegionID", ctx, regionID)
	ret0, _ := ret[0].([]*domain.Price)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByRegionID indicates an expected call of FindByRegionID.
func (mr *MockPriceRepositoryMockRecorder) FindByRegionID(ctx, regionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByRegionID", reflect.TypeOf((*MockPriceRepository)(nil).FindByRegionID), ctx, regionID)
}

// FindDeletedByID mocks base method.
func (m *MockPriceRepository) FindDeletedByID(ctx context.Context, id uuid.UUID) (*domain.Price, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDeletedByID", ctx, id)
	ret0, _ := ret[0].(*domain.Price)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDeletedByID indicates an expected call of FindDeletedByID.
func (mr *MockPriceRepositoryMockRecorder) FindDeletedByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDeletedByID", reflect.TypeOf((*MockPriceRepository)(nil).FindDeletedByID), ctx, id)
}

// Restore mocks base method.
func (m *MockPriceRepository) Restore(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Restore indicates an expected call of Restore.
func (mr *MockPriceRepositoryMockRecorder) Restore(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockPriceRepository)(nil).Restore), ctx, id)
}

// Update mocks base method.
func (m *MockPriceRepository) Update(ctx context.Context, id uuid.UUID, price *domain.Price) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, price)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPriceRepositoryMockRecorder) Update(ctx, id, price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPriceRepository)(nil).Update), ctx, id, price)
}
