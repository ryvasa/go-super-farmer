// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/interface/supply_history_repository_interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	domain "github.com/ryvasa/go-super-farmer/internal/model/domain"
)

// MockSupplyHistoryRepository is a mock of SupplyHistoryRepository interface.
type MockSupplyHistoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSupplyHistoryRepositoryMockRecorder
}

// MockSupplyHistoryRepositoryMockRecorder is the mock recorder for MockSupplyHistoryRepository.
type MockSupplyHistoryRepositoryMockRecorder struct {
	mock *MockSupplyHistoryRepository
}

// NewMockSupplyHistoryRepository creates a new mock instance.
func NewMockSupplyHistoryRepository(ctrl *gomock.Controller) *MockSupplyHistoryRepository {
	mock := &MockSupplyHistoryRepository{ctrl: ctrl}
	mock.recorder = &MockSupplyHistoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSupplyHistoryRepository) EXPECT() *MockSupplyHistoryRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSupplyHistoryRepository) Create(ctx context.Context, supply *domain.SupplyHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, supply)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSupplyHistoryRepositoryMockRecorder) Create(ctx, supply interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSupplyHistoryRepository)(nil).Create), ctx, supply)
}

// FindAll mocks base method.
func (m *MockSupplyHistoryRepository) FindAll(ctx context.Context) ([]*domain.SupplyHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]*domain.SupplyHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockSupplyHistoryRepositoryMockRecorder) FindAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockSupplyHistoryRepository)(nil).FindAll), ctx)
}

// FindByCommodityID mocks base method.
func (m *MockSupplyHistoryRepository) FindByCommodityID(ctx context.Context, id uuid.UUID) ([]*domain.SupplyHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCommodityID", ctx, id)
	ret0, _ := ret[0].([]*domain.SupplyHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCommodityID indicates an expected call of FindByCommodityID.
func (mr *MockSupplyHistoryRepositoryMockRecorder) FindByCommodityID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCommodityID", reflect.TypeOf((*MockSupplyHistoryRepository)(nil).FindByCommodityID), ctx, id)
}

// FindByCommodityIDAndRegionID mocks base method.
func (m *MockSupplyHistoryRepository) FindByCommodityIDAndRegionID(ctx context.Context, commodityID, regionID uuid.UUID) ([]*domain.SupplyHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCommodityIDAndRegionID", ctx, commodityID, regionID)
	ret0, _ := ret[0].([]*domain.SupplyHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCommodityIDAndRegionID indicates an expected call of FindByCommodityIDAndRegionID.
func (mr *MockSupplyHistoryRepositoryMockRecorder) FindByCommodityIDAndRegionID(ctx, commodityID, regionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCommodityIDAndRegionID", reflect.TypeOf((*MockSupplyHistoryRepository)(nil).FindByCommodityIDAndRegionID), ctx, commodityID, regionID)
}

// FindByID mocks base method.
func (m *MockSupplyHistoryRepository) FindByID(ctx context.Context, id uuid.UUID) (*domain.SupplyHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*domain.SupplyHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockSupplyHistoryRepositoryMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockSupplyHistoryRepository)(nil).FindByID), ctx, id)
}

// FindByRegionID mocks base method.
func (m *MockSupplyHistoryRepository) FindByRegionID(ctx context.Context, id uuid.UUID) ([]*domain.SupplyHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByRegionID", ctx, id)
	ret0, _ := ret[0].([]*domain.SupplyHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByRegionID indicates an expected call of FindByRegionID.
func (mr *MockSupplyHistoryRepositoryMockRecorder) FindByRegionID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByRegionID", reflect.TypeOf((*MockSupplyHistoryRepository)(nil).FindByRegionID), ctx, id)
}
