// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire_excel

import (
	"github.com/google/wire"
	"github.com/ryvasa/go-super-farmer/cmd/excel/app"
	"github.com/ryvasa/go-super-farmer/pkg/database"
	"github.com/ryvasa/go-super-farmer/pkg/env"
	"github.com/ryvasa/go-super-farmer/pkg/messages"
	"github.com/ryvasa/go-super-farmer/service_excel/handler"
	"github.com/ryvasa/go-super-farmer/service_excel/repository"
	"github.com/ryvasa/go-super-farmer/service_excel/usecase"
)

// Injectors from wire.go:

func InitializeExcelApp() (*app.ExcelApp, error) {
	envEnv, err := env.LoadEnv()
	if err != nil {
		return nil, err
	}
	db, err := database.NewPostgres(envEnv)
	if err != nil {
		return nil, err
	}
	rabbitMQ, err := messages.NewRabbitMQ(envEnv)
	if err != nil {
		return nil, err
	}
	reportRepository := repository.NewReportRepositoryImpl(db)
	excelInterface := usecase.NewExcelImpl()
	rabbitMQUsecase := usecase.NewRabbitMQUsecase(reportRepository, excelInterface)
	rabbitMQHandler := handler.NewRabbitMQHandler(rabbitMQUsecase, excelInterface, rabbitMQ)
	excelApp := app.NewApp(envEnv, db, rabbitMQ, rabbitMQHandler)
	return excelApp, nil
}

// wire.go:

var allSet = wire.NewSet(env.LoadEnv, database.NewPostgres, messages.NewRabbitMQ, repository.NewReportRepositoryImpl, usecase.NewExcelImpl, usecase.NewRabbitMQUsecase, handler.NewRabbitMQHandler, app.NewApp)
